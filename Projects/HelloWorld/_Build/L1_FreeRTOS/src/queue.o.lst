   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"queue.c"
  15              		.text
  16              		.align	1
  17              		.thumb
  18              		.thumb_func
  20              	prvCopyDataFromQueue:
  21              		@ args = 0, pretend = 0, frame = 0
  22              		@ frame_needed = 0, uses_anonymous_args = 0
  23 0000 30B5     		push	{r4, r5, lr}
  24 0002 0468     		ldr	r4, [r0, #0]
  25 0004 0346     		mov	r3, r0
  26 0006 74B1     		cbz	r4, .L1
  27 0008 C568     		ldr	r5, [r0, #12]
  28 000a 026C     		ldr	r2, [r0, #64]
  29 000c AD18     		adds	r5, r5, r2
  30 000e C560     		str	r5, [r0, #12]
  31 0010 4068     		ldr	r0, [r0, #4]
  32 0012 8542     		cmp	r5, r0
  33 0014 28BF     		it	cs
  34 0016 DC60     		strcs	r4, [r3, #12]
  35 0018 DB68     		ldr	r3, [r3, #12]
  36 001a 0846     		mov	r0, r1
  37 001c 1946     		mov	r1, r3
  38 001e BDE83040 		pop	{r4, r5, lr}
  39 0022 FFF7FEBF 		b	memcpy
  40              	.L1:
  41 0026 30BD     		pop	{r4, r5, pc}
  43              		.align	1
  44              		.thumb
  45              		.thumb_func
  47              	prvCopyDataToQueue:
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50 0028 38B5     		push	{r3, r4, r5, lr}
  51 002a 1546     		mov	r5, r2
  52 002c 026C     		ldr	r2, [r0, #64]
  53 002e 0446     		mov	r4, r0
  54 0030 3AB9     		cbnz	r2, .L5
  55 0032 0568     		ldr	r5, [r0, #0]
  56 0034 002D     		cmp	r5, #0
  57 0036 27D1     		bne	.L6
  58 0038 4068     		ldr	r0, [r0, #4]
  59 003a FFF7FEFF 		bl	vTaskPriorityDisinherit
  60 003e 6560     		str	r5, [r4, #4]
  61 0040 22E0     		b	.L6
  62              	.L5:
  63 0042 65B9     		cbnz	r5, .L7
  64 0044 8068     		ldr	r0, [r0, #8]
  65 0046 FFF7FEFF 		bl	memcpy
  66 004a A268     		ldr	r2, [r4, #8]
  67 004c 236C     		ldr	r3, [r4, #64]
  68 004e D318     		adds	r3, r2, r3
  69 0050 6268     		ldr	r2, [r4, #4]
  70 0052 A360     		str	r3, [r4, #8]
  71 0054 9342     		cmp	r3, r2
  72 0056 17D3     		bcc	.L6
  73 0058 2368     		ldr	r3, [r4, #0]
  74 005a A360     		str	r3, [r4, #8]
  75 005c 14E0     		b	.L6
  76              	.L7:
  77 005e C068     		ldr	r0, [r0, #12]
  78 0060 FFF7FEFF 		bl	memcpy
  79 0064 236C     		ldr	r3, [r4, #64]
  80 0066 E268     		ldr	r2, [r4, #12]
  81 0068 5B42     		negs	r3, r3
  82 006a 2168     		ldr	r1, [r4, #0]
  83 006c D218     		adds	r2, r2, r3
  84 006e 8A42     		cmp	r2, r1
  85 0070 E260     		str	r2, [r4, #12]
  86 0072 02D2     		bcs	.L8
  87 0074 6268     		ldr	r2, [r4, #4]
  88 0076 D318     		adds	r3, r2, r3
  89 0078 E360     		str	r3, [r4, #12]
  90              	.L8:
  91 007a 022D     		cmp	r5, #2
  92 007c 04D1     		bne	.L6
  93 007e A36B     		ldr	r3, [r4, #56]
  94 0080 13B1     		cbz	r3, .L6
  95 0082 A36B     		ldr	r3, [r4, #56]
  96 0084 013B     		subs	r3, r3, #1
  97 0086 A363     		str	r3, [r4, #56]
  98              	.L6:
  99 0088 A36B     		ldr	r3, [r4, #56]
 100 008a 0133     		adds	r3, r3, #1
 101 008c A363     		str	r3, [r4, #56]
 102 008e 38BD     		pop	{r3, r4, r5, pc}
 104              		.align	1
 105              		.thumb
 106              		.thumb_func
 108              	prvNotifyQueueSetContainer:
 109              		@ args = 0, pretend = 0, frame = 8
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111 0090 13B5     		push	{r0, r1, r4, lr}
 112 0092 046D     		ldr	r4, [r0, #80]
 113 0094 0190     		str	r0, [sp, #4]
 114 0096 0A46     		mov	r2, r1
 115 0098 E36B     		ldr	r3, [r4, #60]
 116 009a A16B     		ldr	r1, [r4, #56]
 117 009c 9942     		cmp	r1, r3
 118 009e 0DD2     		bcs	.L11
 119 00a0 2046     		mov	r0, r4
 120 00a2 01A9     		add	r1, sp, #4
 121 00a4 FFF7C0FF 		bl	prvCopyDataToQueue
 122 00a8 606A     		ldr	r0, [r4, #36]
 123 00aa 40B1     		cbz	r0, .L10
 124 00ac 04F12400 		add	r0, r4, #36
 125 00b0 FFF7FEFF 		bl	xTaskRemoveFromEventList
 126 00b4 0030     		adds	r0, r0, #0
 127 00b6 18BF     		it	ne
 128 00b8 0120     		movne	r0, #1
 129 00ba 00E0     		b	.L10
 130              	.L11:
 131 00bc 0020     		movs	r0, #0
 132              	.L10:
 133 00be 1CBD     		pop	{r2, r3, r4, pc}
 135              		.align	1
 136              		.thumb
 137              		.thumb_func
 139              	prvUnlockQueue:
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142 00c0 38B5     		push	{r3, r4, r5, lr}
 143 00c2 0446     		mov	r4, r0
 144 00c4 04F12405 		add	r5, r4, #36
 145 00c8 FFF7FEFF 		bl	vPortEnterCritical
 146 00cc 13E0     		b	.L14
 147              	.L18:
 148 00ce 236D     		ldr	r3, [r4, #80]
 149 00d0 33B1     		cbz	r3, .L15
 150 00d2 0021     		movs	r1, #0
 151 00d4 2046     		mov	r0, r4
 152 00d6 FFF7DBFF 		bl	prvNotifyQueueSetContainer
 153 00da 0128     		cmp	r0, #1
 154 00dc 08D1     		bne	.L16
 155 00de 05E0     		b	.L23
 156              	.L15:
 157 00e0 636A     		ldr	r3, [r4, #36]
 158 00e2 5BB1     		cbz	r3, .L17
 159 00e4 2846     		mov	r0, r5
 160 00e6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 161 00ea 08B1     		cbz	r0, .L16
 162              	.L23:
 163 00ec FFF7FEFF 		bl	vTaskMissedYield
 164              	.L16:
 165 00f0 A36C     		ldr	r3, [r4, #72]
 166 00f2 013B     		subs	r3, r3, #1
 167 00f4 A364     		str	r3, [r4, #72]
 168              	.L14:
 169 00f6 A36C     		ldr	r3, [r4, #72]
 170 00f8 002B     		cmp	r3, #0
 171 00fa E8DC     		bgt	.L18
 172              	.L17:
 173 00fc 4FF0FF33 		mov	r3, #-1
 174 0100 A364     		str	r3, [r4, #72]
 175 0102 FFF7FEFF 		bl	vPortExitCritical
 176 0106 04F11005 		add	r5, r4, #16
 177 010a FFF7FEFF 		bl	vPortEnterCritical
 178 010e 0AE0     		b	.L19
 179              	.L22:
 180 0110 2369     		ldr	r3, [r4, #16]
 181 0112 5BB1     		cbz	r3, .L20
 182 0114 2846     		mov	r0, r5
 183 0116 FFF7FEFF 		bl	xTaskRemoveFromEventList
 184 011a 08B1     		cbz	r0, .L21
 185 011c FFF7FEFF 		bl	vTaskMissedYield
 186              	.L21:
 187 0120 636C     		ldr	r3, [r4, #68]
 188 0122 013B     		subs	r3, r3, #1
 189 0124 6364     		str	r3, [r4, #68]
 190              	.L19:
 191 0126 636C     		ldr	r3, [r4, #68]
 192 0128 002B     		cmp	r3, #0
 193 012a F1DC     		bgt	.L22
 194              	.L20:
 195 012c 4FF0FF33 		mov	r3, #-1
 196 0130 6364     		str	r3, [r4, #68]
 197 0132 BDE83840 		pop	{r3, r4, r5, lr}
 198 0136 FFF7FEBF 		b	vPortExitCritical
 200              		.align	1
 201              		.global	xQueueGenericReset
 202              		.thumb
 203              		.thumb_func
 205              	xQueueGenericReset:
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208 013a 38B5     		push	{r3, r4, r5, lr}
 209 013c 0446     		mov	r4, r0
 210 013e 0D46     		mov	r5, r1
 211 0140 FFF7FEFF 		bl	vPortEnterCritical
 212 0144 2368     		ldr	r3, [r4, #0]
 213 0146 E16B     		ldr	r1, [r4, #60]
 214 0148 226C     		ldr	r2, [r4, #64]
 215 014a A360     		str	r3, [r4, #8]
 216 014c 01FB0230 		mla	r0, r1, r2, r3
 217 0150 0139     		subs	r1, r1, #1
 218 0152 02FB0133 		mla	r3, r2, r1, r3
 219 0156 6060     		str	r0, [r4, #4]
 220 0158 E360     		str	r3, [r4, #12]
 221 015a 0020     		movs	r0, #0
 222 015c 4FF0FF33 		mov	r3, #-1
 223 0160 A063     		str	r0, [r4, #56]
 224 0162 6364     		str	r3, [r4, #68]
 225 0164 A364     		str	r3, [r4, #72]
 226 0166 55B9     		cbnz	r5, .L25
 227 0168 2369     		ldr	r3, [r4, #16]
 228 016a 83B1     		cbz	r3, .L26
 229 016c 04F11000 		add	r0, r4, #16
 230 0170 FFF7FEFF 		bl	xTaskRemoveFromEventList
 231 0174 0128     		cmp	r0, #1
 232 0176 0AD1     		bne	.L26
 233 0178 FFF7FEFF 		bl	vPortYield
 234 017c 07E0     		b	.L26
 235              	.L25:
 236 017e 04F11000 		add	r0, r4, #16
 237 0182 FFF7FEFF 		bl	vListInitialise
 238 0186 04F12400 		add	r0, r4, #36
 239 018a FFF7FEFF 		bl	vListInitialise
 240              	.L26:
 241 018e FFF7FEFF 		bl	vPortExitCritical
 242 0192 0120     		movs	r0, #1
 243 0194 38BD     		pop	{r3, r4, r5, pc}
 245              		.align	1
 246              		.global	xQueueGenericCreate
 247              		.thumb
 248              		.thumb_func
 250              	xQueueGenericCreate:
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253 0196 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 254 019a 0446     		mov	r4, r0
 255 019c 0E46     		mov	r6, r1
 256 019e 1746     		mov	r7, r2
 257 01a0 E0B1     		cbz	r0, .L30
 258 01a2 5420     		movs	r0, #84
 259 01a4 FFF7FEFF 		bl	pvPortMalloc
 260 01a8 0546     		mov	r5, r0
 261 01aa C0B1     		cbz	r0, .L28
 262 01ac 04FB06F0 		mul	r0, r4, r6
 263 01b0 0130     		adds	r0, r0, #1
 264 01b2 FFF7FEFF 		bl	pvPortMalloc
 265 01b6 8046     		mov	r8, r0
 266 01b8 2860     		str	r0, [r5, #0]
 267 01ba 50B1     		cbz	r0, .L29
 268 01bc EC63     		str	r4, [r5, #60]
 269 01be 2E64     		str	r6, [r5, #64]
 270 01c0 2846     		mov	r0, r5
 271 01c2 0121     		movs	r1, #1
 272 01c4 FFF7FEFF 		bl	xQueueGenericReset
 273 01c8 0023     		movs	r3, #0
 274 01ca 85F84D70 		strb	r7, [r5, #77]
 275 01ce 2B65     		str	r3, [r5, #80]
 276 01d0 05E0     		b	.L28
 277              	.L29:
 278 01d2 2846     		mov	r0, r5
 279 01d4 FFF7FEFF 		bl	vPortFree
 280 01d8 4546     		mov	r5, r8
 281 01da 00E0     		b	.L28
 282              	.L30:
 283 01dc 0546     		mov	r5, r0
 284              	.L28:
 285 01de 2846     		mov	r0, r5
 286 01e0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 288              		.align	1
 289              		.global	xQueueCreateCountingSemaphore
 290              		.thumb
 291              		.thumb_func
 293              	xQueueCreateCountingSemaphore:
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296 01e4 10B5     		push	{r4, lr}
 297 01e6 0222     		movs	r2, #2
 298 01e8 0C46     		mov	r4, r1
 299 01ea 0021     		movs	r1, #0
 300 01ec FFF7FEFF 		bl	xQueueGenericCreate
 301 01f0 00B1     		cbz	r0, .L33
 302 01f2 8463     		str	r4, [r0, #56]
 303              	.L33:
 304 01f4 10BD     		pop	{r4, pc}
 306              		.align	1
 307              		.global	xQueueGenericSend
 308              		.thumb
 309              		.thumb_func
 311              	xQueueGenericSend:
 312              		@ args = 0, pretend = 0, frame = 16
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314 01f6 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 315 01fa 4FF00008 		mov	r8, #0
 316 01fe 85B0     		sub	sp, sp, #20
 317 0200 0446     		mov	r4, r0
 318 0202 0D46     		mov	r5, r1
 319 0204 0192     		str	r2, [sp, #4]
 320 0206 1E46     		mov	r6, r3
 321 0208 4746     		mov	r7, r8
 322 020a 01E0     		b	.L35
 323              	.L47:
 324 020c 4FF00108 		mov	r8, #1
 325              	.L35:
 326 0210 FFF7FEFF 		bl	vPortEnterCritical
 327 0214 A26B     		ldr	r2, [r4, #56]
 328 0216 E36B     		ldr	r3, [r4, #60]
 329 0218 9A42     		cmp	r2, r3
 330 021a 01D3     		bcc	.L36
 331 021c 022E     		cmp	r6, #2
 332 021e 19D1     		bne	.L37
 333              	.L36:
 334 0220 2046     		mov	r0, r4
 335 0222 2946     		mov	r1, r5
 336 0224 3246     		mov	r2, r6
 337 0226 FFF7FFFE 		bl	prvCopyDataToQueue
 338 022a 236D     		ldr	r3, [r4, #80]
 339 022c 23B1     		cbz	r3, .L38
 340 022e 2046     		mov	r0, r4
 341 0230 3146     		mov	r1, r6
 342 0232 FFF72DFF 		bl	prvNotifyQueueSetContainer
 343 0236 05E0     		b	.L50
 344              	.L38:
 345 0238 636A     		ldr	r3, [r4, #36]
 346 023a 3BB1     		cbz	r3, .L39
 347 023c 04F12400 		add	r0, r4, #36
 348 0240 FFF7FEFF 		bl	xTaskRemoveFromEventList
 349              	.L50:
 350 0244 0128     		cmp	r0, #1
 351 0246 01D1     		bne	.L39
 352 0248 FFF7FEFF 		bl	vPortYield
 353              	.L39:
 354 024c FFF7FEFF 		bl	vPortExitCritical
 355 0250 0120     		movs	r0, #1
 356 0252 48E0     		b	.L40
 357              	.L37:
 358 0254 DDF80490 		ldr	r9, [sp, #4]
 359 0258 B9F1000F 		cmp	r9, #0
 360 025c 03D1     		bne	.L41
 361 025e FFF7FEFF 		bl	vPortExitCritical
 362 0262 4846     		mov	r0, r9
 363 0264 3FE0     		b	.L40
 364              	.L41:
 365 0266 B8F1000F 		cmp	r8, #0
 366 026a 02D1     		bne	.L42
 367 026c 02A8     		add	r0, sp, #8
 368 026e FFF7FEFF 		bl	vTaskSetTimeOutState
 369              	.L42:
 370 0272 FFF7FEFF 		bl	vPortExitCritical
 371 0276 FFF7FEFF 		bl	vTaskSuspendAll
 372 027a FFF7FEFF 		bl	vPortEnterCritical
 373 027e 636C     		ldr	r3, [r4, #68]
 374 0280 0133     		adds	r3, r3, #1
 375 0282 08BF     		it	eq
 376 0284 6764     		streq	r7, [r4, #68]
 377 0286 A36C     		ldr	r3, [r4, #72]
 378 0288 0133     		adds	r3, r3, #1
 379 028a 08BF     		it	eq
 380 028c A764     		streq	r7, [r4, #72]
 381 028e FFF7FEFF 		bl	vPortExitCritical
 382 0292 02A8     		add	r0, sp, #8
 383 0294 01A9     		add	r1, sp, #4
 384 0296 FFF7FEFF 		bl	xTaskCheckForTimeOut
 385 029a F0B9     		cbnz	r0, .L45
 386 029c FFF7FEFF 		bl	vPortEnterCritical
 387 02a0 D4F83890 		ldr	r9, [r4, #56]
 388 02a4 D4F83C80 		ldr	r8, [r4, #60]
 389 02a8 FFF7FEFF 		bl	vPortExitCritical
 390 02ac C145     		cmp	r9, r8
 391 02ae 0ED1     		bne	.L46
 392 02b0 04F11000 		add	r0, r4, #16
 393 02b4 0199     		ldr	r1, [sp, #4]
 394 02b6 FFF7FEFF 		bl	vTaskPlaceOnEventList
 395 02ba 2046     		mov	r0, r4
 396 02bc FFF700FF 		bl	prvUnlockQueue
 397 02c0 FFF7FEFF 		bl	xTaskResumeAll
 398 02c4 0028     		cmp	r0, #0
 399 02c6 A1D1     		bne	.L47
 400 02c8 FFF7FEFF 		bl	vPortYield
 401 02cc 9EE7     		b	.L47
 402              	.L46:
 403 02ce 2046     		mov	r0, r4
 404 02d0 FFF7F6FE 		bl	prvUnlockQueue
 405 02d4 FFF7FEFF 		bl	xTaskResumeAll
 406 02d8 98E7     		b	.L47
 407              	.L45:
 408 02da 2046     		mov	r0, r4
 409 02dc FFF7F0FE 		bl	prvUnlockQueue
 410 02e0 FFF7FEFF 		bl	xTaskResumeAll
 411 02e4 0020     		movs	r0, #0
 412              	.L40:
 413 02e6 05B0     		add	sp, sp, #20
 414 02e8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 416              		.align	1
 417              		.global	xQueueCreateMutex
 418              		.thumb
 419              		.thumb_func
 421              	xQueueCreateMutex:
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424 02ec 70B5     		push	{r4, r5, r6, lr}
 425 02ee 0646     		mov	r6, r0
 426 02f0 5420     		movs	r0, #84
 427 02f2 FFF7FEFF 		bl	pvPortMalloc
 428 02f6 0446     		mov	r4, r0
 429 02f8 E8B1     		cbz	r0, .L52
 430 02fa 0123     		movs	r3, #1
 431 02fc 0025     		movs	r5, #0
 432 02fe C363     		str	r3, [r0, #60]
 433 0300 4FF0FF33 		mov	r3, #-1
 434 0304 8563     		str	r5, [r0, #56]
 435 0306 4560     		str	r5, [r0, #4]
 436 0308 4364     		str	r3, [r0, #68]
 437 030a 0560     		str	r5, [r0, #0]
 438 030c 8364     		str	r3, [r0, #72]
 439 030e 8560     		str	r5, [r0, #8]
 440 0310 C560     		str	r5, [r0, #12]
 441 0312 0564     		str	r5, [r0, #64]
 442 0314 80F84D60 		strb	r6, [r0, #77]
 443 0318 0565     		str	r5, [r0, #80]
 444 031a 00F11000 		add	r0, r0, #16
 445 031e FFF7FEFF 		bl	vListInitialise
 446 0322 04F12400 		add	r0, r4, #36
 447 0326 FFF7FEFF 		bl	vListInitialise
 448 032a 2046     		mov	r0, r4
 449 032c 2946     		mov	r1, r5
 450 032e 2A46     		mov	r2, r5
 451 0330 2B46     		mov	r3, r5
 452 0332 FFF7FEFF 		bl	xQueueGenericSend
 453              	.L52:
 454 0336 2046     		mov	r0, r4
 455 0338 70BD     		pop	{r4, r5, r6, pc}
 457              		.align	1
 458              		.global	xQueueGenericSendFromISR
 459              		.thumb
 460              		.thumb_func
 462              	xQueueGenericSendFromISR:
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465 033a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 466 033e 0446     		mov	r4, r0
 467 0340 1546     		mov	r5, r2
 468 0342 1E46     		mov	r6, r3
 469 0344 8846     		mov	r8, r1
 470 0346 FFF7FEFF 		bl	ulPortSetInterruptMask
 471 034a A26B     		ldr	r2, [r4, #56]
 472 034c E36B     		ldr	r3, [r4, #60]
 473 034e 0746     		mov	r7, r0
 474 0350 9A42     		cmp	r2, r3
 475 0352 01D3     		bcc	.L54
 476 0354 022E     		cmp	r6, #2
 477 0356 21D1     		bne	.L58
 478              	.L54:
 479 0358 2046     		mov	r0, r4
 480 035a 4146     		mov	r1, r8
 481 035c 3246     		mov	r2, r6
 482 035e FFF763FE 		bl	prvCopyDataToQueue
 483 0362 A36C     		ldr	r3, [r4, #72]
 484 0364 0133     		adds	r3, r3, #1
 485 0366 15D1     		bne	.L56
 486 0368 236D     		ldr	r3, [r4, #80]
 487 036a 43B1     		cbz	r3, .L57
 488 036c 2046     		mov	r0, r4
 489 036e 3146     		mov	r1, r6
 490 0370 FFF78EFE 		bl	prvNotifyQueueSetContainer
 491 0374 0128     		cmp	r0, #1
 492 0376 15D1     		bne	.L61
 493 0378 95B1     		cbz	r5, .L60
 494 037a 2860     		str	r0, [r5, #0]
 495 037c 10E0     		b	.L60
 496              	.L57:
 497 037e 636A     		ldr	r3, [r4, #36]
 498 0380 83B1     		cbz	r3, .L61
 499 0382 04F12400 		add	r0, r4, #36
 500 0386 FFF7FEFF 		bl	xTaskRemoveFromEventList
 501 038a 0124     		movs	r4, #1
 502 038c 58B1     		cbz	r0, .L55
 503 038e 55B1     		cbz	r5, .L55
 504 0390 2C60     		str	r4, [r5, #0]
 505 0392 08E0     		b	.L55
 506              	.L56:
 507 0394 A36C     		ldr	r3, [r4, #72]
 508 0396 0133     		adds	r3, r3, #1
 509 0398 A364     		str	r3, [r4, #72]
 510 039a 03E0     		b	.L61
 511              	.L58:
 512 039c 0024     		movs	r4, #0
 513 039e 02E0     		b	.L55
 514              	.L60:
 515 03a0 0446     		mov	r4, r0
 516 03a2 00E0     		b	.L55
 517              	.L61:
 518 03a4 0124     		movs	r4, #1
 519              	.L55:
 520 03a6 3846     		mov	r0, r7
 521 03a8 FFF7FEFF 		bl	vPortClearInterruptMask
 522 03ac 2046     		mov	r0, r4
 523 03ae BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 525              		.align	1
 526              		.global	xQueueGenericReceive
 527              		.thumb
 528              		.thumb_func
 530              	xQueueGenericReceive:
 531              		@ args = 0, pretend = 0, frame = 16
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533 03b2 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 534 03b6 4FF00008 		mov	r8, #0
 535 03ba 85B0     		sub	sp, sp, #20
 536 03bc 0446     		mov	r4, r0
 537 03be 0D46     		mov	r5, r1
 538 03c0 0192     		str	r2, [sp, #4]
 539 03c2 1F46     		mov	r7, r3
 540 03c4 4646     		mov	r6, r8
 541 03c6 01E0     		b	.L65
 542              	.L78:
 543 03c8 4FF00108 		mov	r8, #1
 544              	.L65:
 545 03cc FFF7FEFF 		bl	vPortEnterCritical
 546 03d0 A36B     		ldr	r3, [r4, #56]
 547 03d2 23B3     		cbz	r3, .L66
 548 03d4 2046     		mov	r0, r4
 549 03d6 2946     		mov	r1, r5
 550 03d8 E668     		ldr	r6, [r4, #12]
 551 03da FFF711FE 		bl	prvCopyDataFromQueue
 552 03de 87B9     		cbnz	r7, .L67
 553 03e0 A36B     		ldr	r3, [r4, #56]
 554 03e2 013B     		subs	r3, r3, #1
 555 03e4 A363     		str	r3, [r4, #56]
 556 03e6 2368     		ldr	r3, [r4, #0]
 557 03e8 13B9     		cbnz	r3, .L68
 558 03ea FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 559 03ee 6060     		str	r0, [r4, #4]
 560              	.L68:
 561 03f0 2369     		ldr	r3, [r4, #16]
 562 03f2 83B1     		cbz	r3, .L69
 563 03f4 04F11000 		add	r0, r4, #16
 564 03f8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 565 03fc 0128     		cmp	r0, #1
 566 03fe 0AD1     		bne	.L69
 567 0400 07E0     		b	.L79
 568              	.L67:
 569 0402 636A     		ldr	r3, [r4, #36]
 570 0404 E660     		str	r6, [r4, #12]
 571 0406 33B1     		cbz	r3, .L69
 572 0408 04F12400 		add	r0, r4, #36
 573 040c FFF7FEFF 		bl	xTaskRemoveFromEventList
 574 0410 08B1     		cbz	r0, .L69
 575              	.L79:
 576 0412 FFF7FEFF 		bl	vPortYield
 577              	.L69:
 578 0416 FFF7FEFF 		bl	vPortExitCritical
 579 041a 0120     		movs	r0, #1
 580 041c 50E0     		b	.L70
 581              	.L66:
 582 041e DDF80490 		ldr	r9, [sp, #4]
 583 0422 B9F1000F 		cmp	r9, #0
 584 0426 03D1     		bne	.L71
 585 0428 FFF7FEFF 		bl	vPortExitCritical
 586 042c 4846     		mov	r0, r9
 587 042e 47E0     		b	.L70
 588              	.L71:
 589 0430 B8F1000F 		cmp	r8, #0
 590 0434 02D1     		bne	.L72
 591 0436 02A8     		add	r0, sp, #8
 592 0438 FFF7FEFF 		bl	vTaskSetTimeOutState
 593              	.L72:
 594 043c FFF7FEFF 		bl	vPortExitCritical
 595 0440 FFF7FEFF 		bl	vTaskSuspendAll
 596 0444 FFF7FEFF 		bl	vPortEnterCritical
 597 0448 636C     		ldr	r3, [r4, #68]
 598 044a 0133     		adds	r3, r3, #1
 599 044c 08BF     		it	eq
 600 044e 6664     		streq	r6, [r4, #68]
 601 0450 A36C     		ldr	r3, [r4, #72]
 602 0452 0133     		adds	r3, r3, #1
 603 0454 08BF     		it	eq
 604 0456 A664     		streq	r6, [r4, #72]
 605 0458 FFF7FEFF 		bl	vPortExitCritical
 606 045c 02A8     		add	r0, sp, #8
 607 045e 01A9     		add	r1, sp, #4
 608 0460 FFF7FEFF 		bl	xTaskCheckForTimeOut
 609 0464 30BB     		cbnz	r0, .L75
 610 0466 FFF7FEFF 		bl	vPortEnterCritical
 611 046a D4F83880 		ldr	r8, [r4, #56]
 612 046e FFF7FEFF 		bl	vPortExitCritical
 613 0472 B8F1000F 		cmp	r8, #0
 614 0476 17D1     		bne	.L76
 615 0478 2368     		ldr	r3, [r4, #0]
 616 047a 33B9     		cbnz	r3, .L77
 617 047c FFF7FEFF 		bl	vPortEnterCritical
 618 0480 6068     		ldr	r0, [r4, #4]
 619 0482 FFF7FEFF 		bl	vTaskPriorityInherit
 620 0486 FFF7FEFF 		bl	vPortExitCritical
 621              	.L77:
 622 048a 04F12400 		add	r0, r4, #36
 623 048e 0199     		ldr	r1, [sp, #4]
 624 0490 FFF7FEFF 		bl	vTaskPlaceOnEventList
 625 0494 2046     		mov	r0, r4
 626 0496 FFF713FE 		bl	prvUnlockQueue
 627 049a FFF7FEFF 		bl	xTaskResumeAll
 628 049e 0028     		cmp	r0, #0
 629 04a0 92D1     		bne	.L78
 630 04a2 FFF7FEFF 		bl	vPortYield
 631 04a6 8FE7     		b	.L78
 632              	.L76:
 633 04a8 2046     		mov	r0, r4
 634 04aa FFF709FE 		bl	prvUnlockQueue
 635 04ae FFF7FEFF 		bl	xTaskResumeAll
 636 04b2 89E7     		b	.L78
 637              	.L75:
 638 04b4 2046     		mov	r0, r4
 639 04b6 FFF703FE 		bl	prvUnlockQueue
 640 04ba FFF7FEFF 		bl	xTaskResumeAll
 641 04be 0020     		movs	r0, #0
 642              	.L70:
 643 04c0 05B0     		add	sp, sp, #20
 644 04c2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 646              		.align	1
 647              		.global	xQueueReceiveFromISR
 648              		.thumb
 649              		.thumb_func
 651              	xQueueReceiveFromISR:
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654 04c6 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 655 04c8 0446     		mov	r4, r0
 656 04ca 0F46     		mov	r7, r1
 657 04cc 1546     		mov	r5, r2
 658 04ce FFF7FEFF 		bl	ulPortSetInterruptMask
 659 04d2 A36B     		ldr	r3, [r4, #56]
 660 04d4 0646     		mov	r6, r0
 661 04d6 C3B1     		cbz	r3, .L83
 662 04d8 2046     		mov	r0, r4
 663 04da 3946     		mov	r1, r7
 664 04dc FFF790FD 		bl	prvCopyDataFromQueue
 665 04e0 A36B     		ldr	r3, [r4, #56]
 666 04e2 013B     		subs	r3, r3, #1
 667 04e4 A363     		str	r3, [r4, #56]
 668 04e6 636C     		ldr	r3, [r4, #68]
 669 04e8 0133     		adds	r3, r3, #1
 670 04ea 0AD1     		bne	.L82
 671 04ec 2369     		ldr	r3, [r4, #16]
 672 04ee 73B1     		cbz	r3, .L84
 673 04f0 04F11000 		add	r0, r4, #16
 674 04f4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 675 04f8 0124     		movs	r4, #1
 676 04fa 48B1     		cbz	r0, .L81
 677 04fc 45B1     		cbz	r5, .L81
 678 04fe 2C60     		str	r4, [r5, #0]
 679 0500 06E0     		b	.L81
 680              	.L82:
 681 0502 636C     		ldr	r3, [r4, #68]
 682 0504 0133     		adds	r3, r3, #1
 683 0506 6364     		str	r3, [r4, #68]
 684 0508 01E0     		b	.L84
 685              	.L83:
 686 050a 1C46     		mov	r4, r3
 687 050c 00E0     		b	.L81
 688              	.L84:
 689 050e 0124     		movs	r4, #1
 690              	.L81:
 691 0510 3046     		mov	r0, r6
 692 0512 FFF7FEFF 		bl	vPortClearInterruptMask
 693 0516 2046     		mov	r0, r4
 694 0518 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 696              		.align	1
 697              		.global	xQueuePeekFromISR
 698              		.thumb
 699              		.thumb_func
 701              	xQueuePeekFromISR:
 702              		@ args = 0, pretend = 0, frame = 0
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704 051a F8B5     		push	{r3, r4, r5, r6, r7, lr}
 705 051c 0446     		mov	r4, r0
 706 051e 0F46     		mov	r7, r1
 707 0520 FFF7FEFF 		bl	ulPortSetInterruptMask
 708 0524 A36B     		ldr	r3, [r4, #56]
 709 0526 0546     		mov	r5, r0
 710 0528 3BB1     		cbz	r3, .L89
 711 052a E668     		ldr	r6, [r4, #12]
 712 052c 2046     		mov	r0, r4
 713 052e 3946     		mov	r1, r7
 714 0530 FFF766FD 		bl	prvCopyDataFromQueue
 715 0534 E660     		str	r6, [r4, #12]
 716 0536 0124     		movs	r4, #1
 717 0538 00E0     		b	.L88
 718              	.L89:
 719 053a 1C46     		mov	r4, r3
 720              	.L88:
 721 053c 2846     		mov	r0, r5
 722 053e FFF7FEFF 		bl	vPortClearInterruptMask
 723 0542 2046     		mov	r0, r4
 724 0544 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 726              		.align	1
 727              		.global	uxQueueMessagesWaiting
 728              		.thumb
 729              		.thumb_func
 731              	uxQueueMessagesWaiting:
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734 0546 10B5     		push	{r4, lr}
 735 0548 0446     		mov	r4, r0
 736 054a FFF7FEFF 		bl	vPortEnterCritical
 737 054e A46B     		ldr	r4, [r4, #56]
 738 0550 FFF7FEFF 		bl	vPortExitCritical
 739 0554 2046     		mov	r0, r4
 740 0556 10BD     		pop	{r4, pc}
 742              		.align	1
 743              		.global	uxQueueMessagesWaitingFromISR
 744              		.thumb
 745              		.thumb_func
 747              	uxQueueMessagesWaitingFromISR:
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              		@ link register save eliminated.
 751 0558 806B     		ldr	r0, [r0, #56]
 752 055a 7047     		bx	lr
 754              		.align	1
 755              		.global	vQueueDelete
 756              		.thumb
 757              		.thumb_func
 759              	vQueueDelete:
 760              		@ args = 0, pretend = 0, frame = 0
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 762 055c 10B5     		push	{r4, lr}
 763 055e 0446     		mov	r4, r0
 764 0560 0068     		ldr	r0, [r0, #0]
 765 0562 FFF7FEFF 		bl	vPortFree
 766 0566 2046     		mov	r0, r4
 767 0568 BDE81040 		pop	{r4, lr}
 768 056c FFF7FEBF 		b	vPortFree
 770              		.align	1
 771              		.global	ucQueueGetQueueNumber
 772              		.thumb
 773              		.thumb_func
 775              	ucQueueGetQueueNumber:
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 778              		@ link register save eliminated.
 779 0570 90F84C00 		ldrb	r0, [r0, #76]	@ zero_extendqisi2
 780 0574 7047     		bx	lr
 782              		.align	1
 783              		.global	vQueueSetQueueNumber
 784              		.thumb
 785              		.thumb_func
 787              	vQueueSetQueueNumber:
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		@ link register save eliminated.
 791 0576 80F84C10 		strb	r1, [r0, #76]
 792 057a 7047     		bx	lr
 794              		.align	1
 795              		.global	ucQueueGetQueueType
 796              		.thumb
 797              		.thumb_func
 799              	ucQueueGetQueueType:
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802              		@ link register save eliminated.
 803 057c 90F84D00 		ldrb	r0, [r0, #77]	@ zero_extendqisi2
 804 0580 7047     		bx	lr
 806              		.align	1
 807              		.global	xQueueIsQueueEmptyFromISR
 808              		.thumb
 809              		.thumb_func
 811              	xQueueIsQueueEmptyFromISR:
 812              		@ args = 0, pretend = 0, frame = 0
 813              		@ frame_needed = 0, uses_anonymous_args = 0
 814              		@ link register save eliminated.
 815 0582 806B     		ldr	r0, [r0, #56]
 816 0584 D0F10100 		rsbs	r0, r0, #1
 817 0588 38BF     		it	cc
 818 058a 0020     		movcc	r0, #0
 819 058c 7047     		bx	lr
 821              		.align	1
 822              		.global	xQueueIsQueueFullFromISR
 823              		.thumb
 824              		.thumb_func
 826              	xQueueIsQueueFullFromISR:
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 829              		@ link register save eliminated.
 830 058e 826B     		ldr	r2, [r0, #56]
 831 0590 C36B     		ldr	r3, [r0, #60]
 832 0592 D31A     		subs	r3, r2, r3
 833 0594 5842     		rsbs	r0, r3, #0
 834 0596 40EB0300 		adc	r0, r0, r3
 835 059a 7047     		bx	lr
 837              		.align	1
 838              		.global	xQueueCreateSet
 839              		.thumb
 840              		.thumb_func
 842              	xQueueCreateSet:
 843              		@ args = 0, pretend = 0, frame = 0
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845              		@ link register save eliminated.
 846 059c 0421     		movs	r1, #4
 847 059e 0022     		movs	r2, #0
 848 05a0 FEE7     		b	xQueueGenericCreate
 850              		.align	1
 851              		.global	xQueueAddToSet
 852              		.thumb
 853              		.thumb_func
 855              	xQueueAddToSet:
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858 05a2 38B5     		push	{r3, r4, r5, lr}
 859 05a4 0446     		mov	r4, r0
 860 05a6 006D     		ldr	r0, [r0, #80]
 861 05a8 0D46     		mov	r5, r1
 862 05aa 40B9     		cbnz	r0, .L101
 863 05ac A36B     		ldr	r3, [r4, #56]
 864 05ae 3BB9     		cbnz	r3, .L100
 865 05b0 FFF7FEFF 		bl	vPortEnterCritical
 866 05b4 2565     		str	r5, [r4, #80]
 867 05b6 FFF7FEFF 		bl	vPortExitCritical
 868 05ba 0120     		movs	r0, #1
 869 05bc 38BD     		pop	{r3, r4, r5, pc}
 870              	.L101:
 871 05be 0020     		movs	r0, #0
 872              	.L100:
 873 05c0 38BD     		pop	{r3, r4, r5, pc}
 875              		.align	1
 876              		.global	xQueueRemoveFromSet
 877              		.thumb
 878              		.thumb_func
 880              	xQueueRemoveFromSet:
 881              		@ args = 0, pretend = 0, frame = 0
 882              		@ frame_needed = 0, uses_anonymous_args = 0
 883 05c2 38B5     		push	{r3, r4, r5, lr}
 884 05c4 036D     		ldr	r3, [r0, #80]
 885 05c6 0446     		mov	r4, r0
 886 05c8 8B42     		cmp	r3, r1
 887 05ca 08D1     		bne	.L105
 888 05cc 856B     		ldr	r5, [r0, #56]
 889 05ce 45B9     		cbnz	r5, .L106
 890 05d0 FFF7FEFF 		bl	vPortEnterCritical
 891 05d4 2565     		str	r5, [r4, #80]
 892 05d6 FFF7FEFF 		bl	vPortExitCritical
 893 05da 0120     		movs	r0, #1
 894 05dc 38BD     		pop	{r3, r4, r5, pc}
 895              	.L105:
 896 05de 0020     		movs	r0, #0
 897 05e0 38BD     		pop	{r3, r4, r5, pc}
 898              	.L106:
 899 05e2 0020     		movs	r0, #0
 900 05e4 38BD     		pop	{r3, r4, r5, pc}
 902              		.align	1
 903              		.global	xQueueSelectFromSet
 904              		.thumb
 905              		.thumb_func
 907              	xQueueSelectFromSet:
 908              		@ args = 0, pretend = 0, frame = 8
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910 05e6 07B5     		push	{r0, r1, r2, lr}
 911 05e8 0023     		movs	r3, #0
 912 05ea 0A46     		mov	r2, r1
 913 05ec 02A9     		add	r1, sp, #8
 914 05ee 41F8043D 		str	r3, [r1, #-4]!
 915 05f2 FFF7FEFF 		bl	xQueueGenericReceive
 916 05f6 0198     		ldr	r0, [sp, #4]
 917 05f8 0EBD     		pop	{r1, r2, r3, pc}
 919              		.align	1
 920              		.global	xQueueSelectFromSetFromISR
 921              		.thumb
 922              		.thumb_func
 924              	xQueueSelectFromSetFromISR:
 925              		@ args = 0, pretend = 0, frame = 8
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927 05fa 07B5     		push	{r0, r1, r2, lr}
 928 05fc 0022     		movs	r2, #0
 929 05fe 02A9     		add	r1, sp, #8
 930 0600 41F8042D 		str	r2, [r1, #-4]!
 931 0604 FFF7FEFF 		bl	xQueueReceiveFromISR
 932 0608 0198     		ldr	r0, [sp, #4]
 933 060a 0EBD     		pop	{r1, r2, r3, pc}
 935              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.6.2 20120613 (release) [ARM/embedded-4_6-br
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
     /tmp/ccjTF3yq.s:16     .text:00000000 $t
     /tmp/ccjTF3yq.s:20     .text:00000000 prvCopyDataFromQueue
     /tmp/ccjTF3yq.s:47     .text:00000028 prvCopyDataToQueue
     /tmp/ccjTF3yq.s:108    .text:00000090 prvNotifyQueueSetContainer
     /tmp/ccjTF3yq.s:139    .text:000000c0 prvUnlockQueue
     /tmp/ccjTF3yq.s:205    .text:0000013a xQueueGenericReset
     /tmp/ccjTF3yq.s:250    .text:00000196 xQueueGenericCreate
     /tmp/ccjTF3yq.s:293    .text:000001e4 xQueueCreateCountingSemaphore
     /tmp/ccjTF3yq.s:311    .text:000001f6 xQueueGenericSend
     /tmp/ccjTF3yq.s:421    .text:000002ec xQueueCreateMutex
     /tmp/ccjTF3yq.s:462    .text:0000033a xQueueGenericSendFromISR
     /tmp/ccjTF3yq.s:530    .text:000003b2 xQueueGenericReceive
     /tmp/ccjTF3yq.s:651    .text:000004c6 xQueueReceiveFromISR
     /tmp/ccjTF3yq.s:701    .text:0000051a xQueuePeekFromISR
     /tmp/ccjTF3yq.s:731    .text:00000546 uxQueueMessagesWaiting
     /tmp/ccjTF3yq.s:747    .text:00000558 uxQueueMessagesWaitingFromISR
     /tmp/ccjTF3yq.s:759    .text:0000055c vQueueDelete
     /tmp/ccjTF3yq.s:775    .text:00000570 ucQueueGetQueueNumber
     /tmp/ccjTF3yq.s:787    .text:00000576 vQueueSetQueueNumber
     /tmp/ccjTF3yq.s:799    .text:0000057c ucQueueGetQueueType
     /tmp/ccjTF3yq.s:811    .text:00000582 xQueueIsQueueEmptyFromISR
     /tmp/ccjTF3yq.s:826    .text:0000058e xQueueIsQueueFullFromISR
     /tmp/ccjTF3yq.s:842    .text:0000059c xQueueCreateSet
     /tmp/ccjTF3yq.s:855    .text:000005a2 xQueueAddToSet
     /tmp/ccjTF3yq.s:880    .text:000005c2 xQueueRemoveFromSet
     /tmp/ccjTF3yq.s:907    .text:000005e6 xQueueSelectFromSet
     /tmp/ccjTF3yq.s:924    .text:000005fa xQueueSelectFromSetFromISR

UNDEFINED SYMBOLS
memcpy
vTaskPriorityDisinherit
xTaskRemoveFromEventList
vPortEnterCritical
vTaskMissedYield
vPortExitCritical
vPortYield
vListInitialise
pvPortMalloc
vPortFree
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
ulPortSetInterruptMask
vPortClearInterruptMask
xTaskGetCurrentTaskHandle
vTaskPriorityInherit
